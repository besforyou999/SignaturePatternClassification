# # This is a basic workflow to help you get started with Actions

# name: Deploy to AWS EC2

# # Controls when the workflow will run
# on:
#   # Triggers the workflow on push or pull request events but only for the main branch
#   push:
#     branches:
#       - main

# # A workflow run is made up of one or more jobs that can run sequentially or in parallel
# jobs:
#   SSH:
#     runs-on: ubuntu-latest

#     steps:
#       - name: Get Github action IP
#         id: ip
#         uses: haythem/public-ip@v1.2
        
#       - name: Setting environment variables..
#         run: |
#           echo "AWS_DEFAULT_REGION=us-east-1" >> $GITHUB_ENV
#           echo "AWS_SG_NAME=launch-wizard-1" >> $GITHUB_ENV
          
#       - name: Add Github Actions IP to Security group
#         run: |
#           aws ec2 authorize-security-group-ingress --group-name ${{ env.AWS_SG_NAME }} --protocol tcp --port 22 --cidr ${{ steps.ip.outputs.ipv4 }}/32    
#         env:
#           AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
#           AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#           AWS_DEFAULT_REGION: ${{ env.AWS_DEFAULT_REGION }}
          
#       - uses: actions/checkout@v2
#       - name: Run scripts in server
#         uses: appleboy/ssh-action@master
#         with:
#           host: ${{ secrets.HOST }}
#           username: ${{ secrets.USER }}
#           key: ${{ secrets.SSH_KEY }}
#           script: |
#             cd app/git/SignaturePatternClassification
#             git pull origin main
#             # cd /home/ec2-user/app/git/SignaturePatternClassification/signserver
#             chmod +x gradlew
#             ./gradlew build
#             cd build/libs
#             kill $(cat ./pid.file)
#             java -jar /home/ec2-user/app/git/SignaturePatternClassification/signserver/build/libs/signserver-0.0.1-SNAPSHOT.jar & echo $! > ./pid.file &
            
#       - name: Remove Github Actions IP from security group
#         run: |
#           aws ec2 revoke-security-group-ingress --group-name ${{ env.AWS_SG_NAME }} --protocol tcp --port 22 --cidr ${{ steps.ip.outputs.ipv4 }}/32
#         env:
#           AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
#           AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#           AWS_DEFAULT_REGION: ${{ env.AWS_DEFAULT_REGION }}
#         if: always()
